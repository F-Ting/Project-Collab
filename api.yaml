swagger: '2.0'
info:
  description: This is the API documentation of Project-Collab site
  version: 1.0.0
  title: Project-Collab
  contact:
    email: admin@project-collab.ca
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: project
    description: Access to projects info
  - name: users
    description: Operations about users
  - name: comment
    description: Operations on project comments
schemes:
  - https
paths:
  /project:
    get:
      tags:
        - project
      description: >-
        Return a list of 20 projects ranked by most recent, if a user is logged
        in, then projects are automatically ranked based on how well the
        projects category match the user's skill or interests
      operationId: getProjects
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  '/project/{username}':
    get:
      tags:
        - project
      summary: Get user by user name
      description: ''
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
  /project/update:
    post:
      tags:
        - project
      summary: Updated project
      description: This can only be done by the logged in user.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: project id that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated project object
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '400':
          description: Invalid project id supplied
        '404':
          description: Project not found
  /project/remove:
    post:
      tags:
        - project
      summary: Delete project
      description: This can only be done by the logged in user who owns the project.
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '404':
          description: Project not found
  '/comment/{project}':
    get:
      tags:
        - comment
      summary: get all comments for a specified project given project id
      description: This can only be done by the logged in user.
      operationId: getComment
      produces:
        - application/json
      parameters:
        - name: project
          in: path
          description: The project id that the comments belong to
          required: true
          type: string
      responses:
        '404':
          description: Project not found
    post:
      tags:
        - comment
      summary: add comment to a project given project_id
      description: >-
        This can only be done by the logged in user who is or has been a part of
        the project.
      operationId: createComment
      produces:
        - application/json
      parameters:
        - name: project
          in: path
          description: The project id that the comments belong to
          required: true
          type: string
        - in: body
          name: body
          description: Updated project object
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        '404':
          description: Project not found
  '/comment/update/{comment}':
    post:
      tags:
        - comment
      summary: get all comments for a specified project given project id
      description: >-
        This can only be done by the logged in user who is or has been a part of
        the project, and is the owner of this comment.
      operationId: updateComment
      produces:
        - application/json
      parameters:
        - name: comment
          in: path
          description: The comment id that the comments belong to
          required: true
          type: string
      responses:
        '404':
          description: Project not found
  '/comment/delete/{comment}':
    post:
      tags:
        - comment
      summary: add comment to a project given project_id
      description: >-
        This can only be done by the logged in user who is or has been a part of
        the project, and is the owner of this comment.
      operationId: deleteComment
      produces:
        - application/json
      parameters:
        - name: comment
          in: path
          description: The comment id that the comments belong to
          required: true
          type: string
        - in: body
          name: body
          description: Updated project object
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        '404':
          description: Project not found
  /user:
    post:
      tags:
        - users
      summary: Create user
      description: ''
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - users
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
  /user/update:
    post:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
  /user/remove:
    post:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      name:
        type: string
      bio:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      linked_in:
        type: string
      github:
        type: string
      type:
        type: string
  Project:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      github:
        type: string
      url:
        type: string
      project_start_date:
        type: string
      type:
        type: string
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Comment:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
